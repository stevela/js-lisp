var _dbg_withtrace = false; var _dbg_string = new String(); function __dbg_print( text ){ _dbg_string += text + "\n";}function __lex( info ){ var state = 0; var match = -1; var match_pos = 0; var start = 0; var pos = info.offset + 1; do{ pos--; state = 0; match = -2; start = pos; if( info.src.length <= start )return 16; do{ switch( state ){    case 0:        if( ( info.src.charCodeAt( pos ) >= 9 && info.src.charCodeAt( pos ) <= 10 ) || info.src.charCodeAt( pos ) == 13 || info.src.charCodeAt( pos ) == 32 ) state = 1;        else if( info.src.charCodeAt( pos ) == 39 ) state = 2;        else if( info.src.charCodeAt( pos ) == 40 ) state = 3;        else if( info.src.charCodeAt( pos ) == 41 ) state = 4;        else if( ( info.src.charCodeAt( pos ) >= 42 && info.src.charCodeAt( pos ) <= 43 ) || info.src.charCodeAt( pos ) == 45 || info.src.charCodeAt( pos ) == 47 ) state = 5;        else if( ( info.src.charCodeAt( pos ) >= 48 && info.src.charCodeAt( pos ) <= 57 ) ) state = 6;        else if( info.src.charCodeAt( pos ) == 116 ) state = 7;        else if( info.src.charCodeAt( pos ) == 34 ) state = 12;        else if( ( info.src.charCodeAt( pos ) >= 65 && info.src.charCodeAt( pos ) <= 90 ) || info.src.charCodeAt( pos ) == 95 || ( info.src.charCodeAt( pos ) >= 97 && info.src.charCodeAt( pos ) <= 109 ) || ( info.src.charCodeAt( pos ) >= 111 && info.src.charCodeAt( pos ) <= 115 ) || ( info.src.charCodeAt( pos ) >= 117 && info.src.charCodeAt( pos ) <= 122 ) ) state = 13;        else if( info.src.charCodeAt( pos ) == 46 ) state = 15;        else if( info.src.charCodeAt( pos ) == 59 ) state = 17;        else if( info.src.charCodeAt( pos ) == 110 ) state = 19;        else state = -1;        break;    case 1:        state = -1;        match = 1;        match_pos = pos;        break;    case 2:        state = -1;        match = 9;        match_pos = pos;        break;    case 3:        if( info.src.charCodeAt( pos ) == 41 ) state = 9;        else if( ( info.src.charCodeAt( pos ) >= 9 && info.src.charCodeAt( pos ) <= 10 ) || info.src.charCodeAt( pos ) == 13 || info.src.charCodeAt( pos ) == 32 ) state = 18;        else state = -1;        match = 3;        match_pos = pos;        break;    case 4:        state = -1;        match = 4;        match_pos = pos;        break;    case 5:        state = -1;        match = 2;        match_pos = pos;        break;    case 6:        if( ( info.src.charCodeAt( pos ) >= 48 && info.src.charCodeAt( pos ) <= 57 ) ) state = 6;        else if( info.src.charCodeAt( pos ) == 46 ) state = 10;        else state = -1;        match = 6;        match_pos = pos;        break;    case 7:        if( ( info.src.charCodeAt( pos ) >= 48 && info.src.charCodeAt( pos ) <= 57 ) || ( info.src.charCodeAt( pos ) >= 65 && info.src.charCodeAt( pos ) <= 90 ) || info.src.charCodeAt( pos ) == 95 || ( info.src.charCodeAt( pos ) >= 97 && info.src.charCodeAt( pos ) <= 122 ) ) state = 13;        else state = -1;        match = 11;        match_pos = pos;        break;    case 8:        state = -1;        match = 8;        match_pos = pos;        break;    case 9:        state = -1;        match = 10;        match_pos = pos;        break;    case 10:        if( ( info.src.charCodeAt( pos ) >= 48 && info.src.charCodeAt( pos ) <= 57 ) ) state = 10;        else state = -1;        match = 7;        match_pos = pos;        break;    case 11:        if( info.src.charCodeAt( pos ) == 36 ) state = 11;        else if( ( info.src.charCodeAt( pos ) >= 0 && info.src.charCodeAt( pos ) <= 35 ) || ( info.src.charCodeAt( pos ) >= 37 && info.src.charCodeAt( pos ) <= 254 ) ) state = 17;        else state = -1;        match = 5;        match_pos = pos;        break;    case 12:        if( info.src.charCodeAt( pos ) == 34 ) state = 8;        else if( ( info.src.charCodeAt( pos ) >= 0 && info.src.charCodeAt( pos ) <= 33 ) || ( info.src.charCodeAt( pos ) >= 35 && info.src.charCodeAt( pos ) <= 254 ) ) state = 12;        else state = -1;        break;    case 13:        if( ( info.src.charCodeAt( pos ) >= 48 && info.src.charCodeAt( pos ) <= 57 ) || ( info.src.charCodeAt( pos ) >= 65 && info.src.charCodeAt( pos ) <= 90 ) || info.src.charCodeAt( pos ) == 95 || ( info.src.charCodeAt( pos ) >= 97 && info.src.charCodeAt( pos ) <= 122 ) ) state = 13;        else state = -1;        match = 2;        match_pos = pos;        break;    case 14:        if( ( info.src.charCodeAt( pos ) >= 48 && info.src.charCodeAt( pos ) <= 57 ) || ( info.src.charCodeAt( pos ) >= 65 && info.src.charCodeAt( pos ) <= 90 ) || info.src.charCodeAt( pos ) == 95 || ( info.src.charCodeAt( pos ) >= 97 && info.src.charCodeAt( pos ) <= 122 ) ) state = 13;        else state = -1;        match = 10;        match_pos = pos;        break;    case 15:        if( ( info.src.charCodeAt( pos ) >= 48 && info.src.charCodeAt( pos ) <= 57 ) ) state = 10;        else state = -1;        break;    case 16:        if( ( info.src.charCodeAt( pos ) >= 48 && info.src.charCodeAt( pos ) <= 57 ) || ( info.src.charCodeAt( pos ) >= 65 && info.src.charCodeAt( pos ) <= 90 ) || info.src.charCodeAt( pos ) == 95 || ( info.src.charCodeAt( pos ) >= 97 && info.src.charCodeAt( pos ) <= 107 ) || ( info.src.charCodeAt( pos ) >= 109 && info.src.charCodeAt( pos ) <= 122 ) ) state = 13;        else if( info.src.charCodeAt( pos ) == 108 ) state = 14;        else state = -1;        match = 2;        match_pos = pos;        break;    case 17:        if( info.src.charCodeAt( pos ) == 36 ) state = 11;        else if( ( info.src.charCodeAt( pos ) >= 0 && info.src.charCodeAt( pos ) <= 35 ) || ( info.src.charCodeAt( pos ) >= 37 && info.src.charCodeAt( pos ) <= 254 ) ) state = 17;        else state = -1;        break;    case 18:        if( info.src.charCodeAt( pos ) == 41 ) state = 9;        else if( ( info.src.charCodeAt( pos ) >= 9 && info.src.charCodeAt( pos ) <= 10 ) || info.src.charCodeAt( pos ) == 13 || info.src.charCodeAt( pos ) == 32 ) state = 18;        else state = -1;        break;    case 19:        if( ( info.src.charCodeAt( pos ) >= 48 && info.src.charCodeAt( pos ) <= 57 ) || ( info.src.charCodeAt( pos ) >= 65 && info.src.charCodeAt( pos ) <= 90 ) || info.src.charCodeAt( pos ) == 95 || ( info.src.charCodeAt( pos ) >= 97 && info.src.charCodeAt( pos ) <= 104 ) || ( info.src.charCodeAt( pos ) >= 106 && info.src.charCodeAt( pos ) <= 122 ) ) state = 13;        else if( info.src.charCodeAt( pos ) == 105 ) state = 16;        else state = -1;        match = 2;        match_pos = pos;        break;}pos++;}while( state > -1 );}while( 1 > -1 && match == 1 ); if( match > -1 ){ info.att = info.src.substr( start, match_pos - start ); info.offset = match_pos;}else{ info.att = new String(); match = -1;}return match;}function __parse( src, err_off, err_la ){ var sstack = new Array(); var vstack = new Array(); var err_cnt = 0; var act; var go; var la; var rval; var parseinfo = new Function( "", "var offset; var src; var att;" ); var info = new parseinfo(); /* Pop-Table */var pop_tab = new Array(    new Array( 0/* Program' */, 1 ),    new Array( 12/* Program */, 2 ),    new Array( 12/* Program */, 0 ),    new Array( 14/* Atom */, 1 ),    new Array( 14/* Atom */, 1 ),    new Array( 14/* Atom */, 1 ),    new Array( 14/* Atom */, 1 ),    new Array( 14/* Atom */, 1 ),    new Array( 14/* Atom */, 1 ),    new Array( 13/* SExpr */, 1 ),    new Array( 13/* SExpr */, 2 ),    new Array( 13/* SExpr */, 3 ),    new Array( 15/* SExprList */, 1 ),    new Array( 15/* SExprList */, 2 ));/* Action-Table */var act_tab = new Array(    /* State 0 */ new Array( 16/* "$" */,-2 , 9/* "Quote" */,-2 , 3/* "OParen" */,-2 , 2/* "Symbol" */,-2 , 6/* "Integer" */,-2 , 7/* "Float" */,-2 , 8/* "String" */,-2 , 10/* "Nil" */,-2 , 11/* "True" */,-2 ),    /* State 1 */ new Array( 9/* "Quote" */,4 , 3/* "OParen" */,5 , 2/* "Symbol" */,6 , 6/* "Integer" */,7 , 7/* "Float" */,8 , 8/* "String" */,9 , 10/* "Nil" */,10 , 11/* "True" */,11 , 16/* "$" */,0 ),    /* State 2 */ new Array( 16/* "$" */,-1 , 9/* "Quote" */,-1 , 3/* "OParen" */,-1 , 2/* "Symbol" */,-1 , 6/* "Integer" */,-1 , 7/* "Float" */,-1 , 8/* "String" */,-1 , 10/* "Nil" */,-1 , 11/* "True" */,-1 ),    /* State 3 */ new Array( 16/* "$" */,-9 , 9/* "Quote" */,-9 , 3/* "OParen" */,-9 , 2/* "Symbol" */,-9 , 6/* "Integer" */,-9 , 7/* "Float" */,-9 , 8/* "String" */,-9 , 10/* "Nil" */,-9 , 11/* "True" */,-9 , 4/* "CParen" */,-9 ),    /* State 4 */ new Array( 9/* "Quote" */,4 , 3/* "OParen" */,5 , 2/* "Symbol" */,6 , 6/* "Integer" */,7 , 7/* "Float" */,8 , 8/* "String" */,9 , 10/* "Nil" */,10 , 11/* "True" */,11 ),    /* State 5 */ new Array( 9/* "Quote" */,4 , 3/* "OParen" */,5 , 2/* "Symbol" */,6 , 6/* "Integer" */,7 , 7/* "Float" */,8 , 8/* "String" */,9 , 10/* "Nil" */,10 , 11/* "True" */,11 ),    /* State 6 */ new Array( 16/* "$" */,-3 , 9/* "Quote" */,-3 , 3/* "OParen" */,-3 , 2/* "Symbol" */,-3 , 6/* "Integer" */,-3 , 7/* "Float" */,-3 , 8/* "String" */,-3 , 10/* "Nil" */,-3 , 11/* "True" */,-3 , 4/* "CParen" */,-3 ),    /* State 7 */ new Array( 16/* "$" */,-4 , 9/* "Quote" */,-4 , 3/* "OParen" */,-4 , 2/* "Symbol" */,-4 , 6/* "Integer" */,-4 , 7/* "Float" */,-4 , 8/* "String" */,-4 , 10/* "Nil" */,-4 , 11/* "True" */,-4 , 4/* "CParen" */,-4 ),    /* State 8 */ new Array( 16/* "$" */,-5 , 9/* "Quote" */,-5 , 3/* "OParen" */,-5 , 2/* "Symbol" */,-5 , 6/* "Integer" */,-5 , 7/* "Float" */,-5 , 8/* "String" */,-5 , 10/* "Nil" */,-5 , 11/* "True" */,-5 , 4/* "CParen" */,-5 ),    /* State 9 */ new Array( 16/* "$" */,-6 , 9/* "Quote" */,-6 , 3/* "OParen" */,-6 , 2/* "Symbol" */,-6 , 6/* "Integer" */,-6 , 7/* "Float" */,-6 , 8/* "String" */,-6 , 10/* "Nil" */,-6 , 11/* "True" */,-6 , 4/* "CParen" */,-6 ),    /* State 10 */ new Array( 16/* "$" */,-7 , 9/* "Quote" */,-7 , 3/* "OParen" */,-7 , 2/* "Symbol" */,-7 , 6/* "Integer" */,-7 , 7/* "Float" */,-7 , 8/* "String" */,-7 , 10/* "Nil" */,-7 , 11/* "True" */,-7 , 4/* "CParen" */,-7 ),    /* State 11 */ new Array( 16/* "$" */,-8 , 9/* "Quote" */,-8 , 3/* "OParen" */,-8 , 2/* "Symbol" */,-8 , 6/* "Integer" */,-8 , 7/* "Float" */,-8 , 8/* "String" */,-8 , 10/* "Nil" */,-8 , 11/* "True" */,-8 , 4/* "CParen" */,-8 ),    /* State 12 */ new Array( 16/* "$" */,-10 , 9/* "Quote" */,-10 , 3/* "OParen" */,-10 , 2/* "Symbol" */,-10 , 6/* "Integer" */,-10 , 7/* "Float" */,-10 , 8/* "String" */,-10 , 10/* "Nil" */,-10 , 11/* "True" */,-10 , 4/* "CParen" */,-10 ),    /* State 13 */ new Array( 4/* "CParen" */,16 , 9/* "Quote" */,4 , 3/* "OParen" */,5 , 2/* "Symbol" */,6 , 6/* "Integer" */,7 , 7/* "Float" */,8 , 8/* "String" */,9 , 10/* "Nil" */,10 , 11/* "True" */,11 ),    /* State 14 */ new Array( 4/* "CParen" */,-12 , 9/* "Quote" */,-12 , 3/* "OParen" */,-12 , 2/* "Symbol" */,-12 , 6/* "Integer" */,-12 , 7/* "Float" */,-12 , 8/* "String" */,-12 , 10/* "Nil" */,-12 , 11/* "True" */,-12 ),    /* State 15 */ new Array( 4/* "CParen" */,-13 , 9/* "Quote" */,-13 , 3/* "OParen" */,-13 , 2/* "Symbol" */,-13 , 6/* "Integer" */,-13 , 7/* "Float" */,-13 , 8/* "String" */,-13 , 10/* "Nil" */,-13 , 11/* "True" */,-13 ),    /* State 16 */ new Array( 16/* "$" */,-11 , 9/* "Quote" */,-11 , 3/* "OParen" */,-11 , 2/* "Symbol" */,-11 , 6/* "Integer" */,-11 , 7/* "Float" */,-11 , 8/* "String" */,-11 , 10/* "Nil" */,-11 , 11/* "True" */,-11 , 4/* "CParen" */,-11 ));/* Goto-Table */var goto_tab = new Array(    /* State 0 */ new Array( 12/* Program */,1 ),    /* State 1 */ new Array( 13/* SExpr */,2 , 14/* Atom */,3 ),    /* State 2 */ new Array( ),    /* State 3 */ new Array( ),    /* State 4 */ new Array( 13/* SExpr */,12 , 14/* Atom */,3 ),    /* State 5 */ new Array( 15/* SExprList */,13 , 13/* SExpr */,14 , 14/* Atom */,3 ),    /* State 6 */ new Array( ),    /* State 7 */ new Array( ),    /* State 8 */ new Array( ),    /* State 9 */ new Array( ),    /* State 10 */ new Array( ),    /* State 11 */ new Array( ),    /* State 12 */ new Array( ),    /* State 13 */ new Array( 13/* SExpr */,15 , 14/* Atom */,3 ),    /* State 14 */ new Array( ),    /* State 15 */ new Array( ),    /* State 16 */ new Array( ));/* Symbol labels */var labels = new Array(    "Program'" /* Non-terminal symbol */,    "^" /* Terminal symbol */,    "Symbol" /* Terminal symbol */,    "OParen" /* Terminal symbol */,    "CParen" /* Terminal symbol */,    ";.*$" /* Terminal symbol */,    "Integer" /* Terminal symbol */,    "Float" /* Terminal symbol */,    "String" /* Terminal symbol */,    "Quote" /* Terminal symbol */,    "Nil" /* Terminal symbol */,    "True" /* Terminal symbol */,    "Program" /* Non-terminal symbol */,    "SExpr" /* Non-terminal symbol */,    "Atom" /* Non-terminal symbol */,    "SExprList" /* Non-terminal symbol */,    "$" /* Terminal symbol */);info.offset = 0; info.src = src; info.att = new String(); if( !err_off )err_off = new Array(); if( !err_la )err_la = new Array(); sstack.push( 0 ); vstack.push( 0 ); la = __lex( info ); while( true ){ act = 18; for( var i = 0; i < act_tab[sstack[sstack.length-1]].length; i+=2 ){ if( act_tab[sstack[sstack.length-1]][i] == la ){ act = act_tab[sstack[sstack.length-1]][i+1]; break;}}if( _dbg_withtrace && sstack.length > 0 ){ __dbg_print( "\nState " + sstack[sstack.length-1] + "\n" + "\tLookahead: " + labels[la] + " (\"" + info.att + "\")\n" + "\tAction: " + act + "\n" + "\tSource: \"" + info.src.substr( info.offset, 30 ) + ( ( info.offset + 30 < info.src.length ) ?"..." : "" ) + "\"\n" + "\tStack: " + sstack.join() + "\n" + "\tValue stack: " + vstack.join() + "\n" );}if( act == 18 ){ if( _dbg_withtrace )__dbg_print( "Error detected: There is no reduce or shift on the symbol " + labels[la] ); err_cnt++; err_off.push( info.offset - info.att.length ); err_la.push( new Array() ); for( var i = 0; i < act_tab[sstack[sstack.length-1]].length; i+=2 )err_la[err_la.length-1].push( labels[act_tab[sstack[sstack.length-1]][i]] ); var rsstack = new Array(); var rvstack = new Array(); for( var i = 0; i < sstack.length; i++ ){ rsstack[i] = sstack[i]; rvstack[i] = vstack[i];}while( act == 18 && la != 16 ){ if( _dbg_withtrace )__dbg_print( "\tError recovery\n" + "Current lookahead: " + labels[la] + " (" + info.att + ")\n" + "Action: " + act + "\n\n" ); if( la == -1 )info.offset++; while( act == 18 && sstack.length > 0 ){ sstack.pop(); vstack.pop(); if( sstack.length == 0 )break; act = 18; for( var i = 0; i < act_tab[sstack[sstack.length-1]].length; i+=2 ){ if( act_tab[sstack[sstack.length-1]][i] == la ){ act = act_tab[sstack[sstack.length-1]][i+1]; break;}}}if( act != 18 )break; for( var i = 0; i < rsstack.length; i++ ){ sstack.push( rsstack[i] ); vstack.push( rvstack[i] );}la = __lex( info );}if( act == 18 ){ if( _dbg_withtrace )__dbg_print( "\tError recovery failed, terminating parse process..." ); break;}if( _dbg_withtrace )__dbg_print( "\tError recovery succeeded, continuing" );}if( act > 0 ){ if( _dbg_withtrace )__dbg_print( "Shifting symbol: " + labels[la] + " (" + info.att + ")" ); sstack.push( act ); vstack.push( info.att ); la = __lex( info ); if( _dbg_withtrace )__dbg_print( "\tNew lookahead symbol: " + labels[la] + " (" + info.att + ")" );}else{ act *= -1; if( _dbg_withtrace )__dbg_print( "Reducing by producution: " + act ); rval = void(0); if( _dbg_withtrace )__dbg_print( "\tPerforming semantic action..." ); switch( act ){    case 0:    {        rval = vstack[ vstack.length - 1 ];    }    break;    case 1:    {         lispProgram.push(vstack[ vstack.length - 1 ]);    }    break;    case 2:    {        rval = vstack[ vstack.length - 0 ];    }    break;    case 3:    {         rval = new SymbolNode(vstack[ vstack.length - 1 ]);    }    break;    case 4:    {         rval = new NumberNode(parseInt(vstack[ vstack.length - 1 ]));    }    break;    case 5:    {         rval = new NumberNode(parseFloat(vstack[ vstack.length - 1 ]));    }    break;    case 6:    {         rval = new StringNode(vstack[ vstack.length - 1 ]);    }    break;    case 7:    {         rval = new NilNode();    }    break;    case 8:    {         rval = new TrueNode();    }    break;    case 9:    {        rval = vstack[ vstack.length - 1 ];    }    break;    case 10:    {         rval = new ListNode(new Array(new SymbolNode('quote'), vstack[ vstack.length - 1 ]));    }    break;    case 11:    {         rval = new ListNode(vstack[ vstack.length - 2 ]);    }    break;    case 12:    {         rval = new Array(); rval.push(vstack[ vstack.length - 1 ]);    }    break;    case 13:    {         rval = vstack[ vstack.length - 2 ]; rval.push(vstack[ vstack.length - 1 ]);    }    break;}if( _dbg_withtrace )__dbg_print( "\tPopping " + pop_tab[act][1] + " off the stack..." ); for( var i = 0; i < pop_tab[act][1]; i++ ){ sstack.pop(); vstack.pop();}go = -1; for( var i = 0; i < goto_tab[sstack[sstack.length-1]].length; i+=2 ){ if( goto_tab[sstack[sstack.length-1]][i] == pop_tab[act][0] ){ go = goto_tab[sstack[sstack.length-1]][i+1]; break;}}if( act == 0 )break; if( _dbg_withtrace )__dbg_print( "\tPushing non-terminal " + labels[ pop_tab[act][0] ] ); sstack.push( go ); vstack.push( rval );}if( _dbg_withtrace ){ alert( _dbg_string ); _dbg_string = new String();}}if( _dbg_withtrace ){ __dbg_print( "\nParse complete." ); alert( _dbg_string );}return err_cnt;}